// Generated by BUCKLESCRIPT VERSION 5.0.1, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var IO$Blog = require("./IO.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Prism$Blog = require("./Prism.bs.js");
var ArrayLabels = require("bs-platform/lib/js/arrayLabels.js");
var Htmlparser2 = require("htmlparser2");
var Markdown$Blog = require("./Markdown.bs.js");

function make(content, author, twitter, date, last_edit, title, description) {
  return {
          content: content,
          author: author,
          twitter: twitter,
          date: date,
          last_edit: last_edit,
          title: title,
          description: description
        };
}

function notfound(param) {
  return {
          content: "Not found",
          author: "",
          twitter: "",
          date: "",
          last_edit: "",
          title: "not found",
          description: "not found"
        };
}

var Post = /* module */[
  /* make */make,
  /* notfound */notfound
];

var deHTMLRegExp = new RegExp("&(.+?);", "g");

function deHTML(codeText) {
  var deHTML$1 = function (param, capture, param$1, param$2) {
    switch (capture) {
      case "amp" : 
          return "&";
      case "apos" : 
          return "'";
      case "gt" : 
          return ">";
      case "lt" : 
          return "<";
      case "quot" : 
          return "\"";
      default:
        return capture;
    }
  };
  return codeText.replace(deHTMLRegExp, deHTML$1);
}

function endsWith(text, search) {
  return text.endsWith(search);
}

var unsafeFillMeta = (
  (f, json) => {
    const obj = JSON.parse(json);
    return f(
      obj.author,
      obj.twitter,
      obj.date,
      obj.last_edit,
      obj.title,
      obj.description
    );
  }
);

function blogPostcontent(filename) {
  var article = List.filter((function (file) {
            return file.endsWith("_" + (filename + ".md"));
          }))(IO$Blog.readDir("blog/blog"));
  if (List.length(article) === 0) {
    return "Not found yo!";
  } else {
    var file = IO$Blog.readFile(Path.join("blog/blog", List.hd(article)));
    if (file !== undefined) {
      var marked = Curry._1(Markdown$Blog.markdown, file);
      var domlist = Htmlparser2.parseDOM(marked);
      if (domlist.length !== 0) {
        var codelist = Htmlparser2.DomUtils.getElementsByTagName("code", domlist);
        codelist.forEach((function (code) {
                var codeText = Htmlparser2.DomUtils.getText(code);
                var match = Htmlparser2.DomUtils.hasAttrib(code, "class");
                var language = match ? Htmlparser2.DomUtils.getAttributeValue(code, "class") : "language-javascript";
                var isMultiline = (codeText.includes('\n'));
                if (isMultiline) {
                  var highlighted = Prism$Blog.highlight(deHTML(codeText), language);
                  Htmlparser2.DomUtils.replaceElement(code, Caml_array.caml_array_get(Htmlparser2.parseDOM("<code class='multiline " + (language + ("'>" + (highlighted + "</code>")))), 0));
                  return /* () */0;
                } else {
                  return 0;
                }
              }));
        return Htmlparser2.DomUtils.getOuterHTML(domlist);
      } else {
        return marked;
      }
    } else {
      return "";
    }
  }
}

function getSlug(file) {
  var result = new RegExp("(.+)?_(.+).json").exec(file);
  if (result !== null) {
    var maybeCapture = Caml_array.caml_array_get(result, 2);
    if (maybeCapture == null) {
      return "";
    } else {
      return maybeCapture;
    }
  } else {
    return "";
  }
}

var jsons = List.filter((function (file) {
          return file.endsWith(".json");
        }))(IO$Blog.readDir("blog/blog"));

var blogposts = List.map((function (entry) {
        var slug = getSlug(entry);
        var file = IO$Blog.readFile(Path.join("blog/blog", entry));
        if (file !== undefined) {
          var f = function (param, param$1, param$2, param$3, param$4, param$5) {
            return make("", param, param$1, param$2, param$3, param$4, param$5);
          };
          return /* tuple */[
                  slug,
                  Curry._2(unsafeFillMeta, f, file)
                ];
        }
        
      }), jsons);

var blogEntries = ArrayLabels.of_list(List.filter((function (option) {
              return option !== undefined;
            }))(blogposts));

function renderBlogPost(filename) {
  var meta = List.filter((function (file) {
            return file.endsWith("_" + (filename + ".json"));
          }))(IO$Blog.readDir("blog/blog"));
  if (List.length(meta) === 0) {
    return notfound(/* () */0);
  } else {
    var file = IO$Blog.readFile(Path.join("blog/blog", List.hd(meta)));
    if (file !== undefined) {
      var partial_arg = blogPostcontent(filename);
      var f = function (param, param$1, param$2, param$3, param$4, param$5) {
        return make(partial_arg, param, param$1, param$2, param$3, param$4, param$5);
      };
      return Curry._2(unsafeFillMeta, f, file);
    } else {
      return notfound(/* () */0);
    }
  }
}

exports.Post = Post;
exports.deHTMLRegExp = deHTMLRegExp;
exports.deHTML = deHTML;
exports.endsWith = endsWith;
exports.unsafeFillMeta = unsafeFillMeta;
exports.blogPostcontent = blogPostcontent;
exports.getSlug = getSlug;
exports.blogEntries = blogEntries;
exports.renderBlogPost = renderBlogPost;
/* deHTMLRegExp Not a pure module */
